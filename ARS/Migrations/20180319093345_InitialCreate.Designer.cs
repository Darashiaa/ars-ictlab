// <auto-generated />
using ARS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ARS.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180319093345_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("ARS.Models.ClassRoom", b =>
                {
                    b.Property<long>("ClassroomId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Available");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsDisabled");

                    b.Property<int>("LocationId");

                    b.Property<string>("Name");

                    b.Property<bool>("Public");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("TemperatureId");

                    b.Property<long?>("TemperatureId1");

                    b.HasKey("ClassroomId");

                    b.HasIndex("TemperatureId1")
                        .IsUnique();

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("ARS.Models.Location", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ARS.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<bool>("Read");

                    b.Property<int>("RoleId");

                    b.Property<long?>("RoleId1");

                    b.Property<int>("UserId");

                    b.Property<long?>("UserId1");

                    b.HasKey("NotificationId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("ARS.Models.Problem", b =>
                {
                    b.Property<long>("ProblemId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassRoomId");

                    b.Property<long?>("ClassroomId");

                    b.Property<string>("Name");

                    b.HasKey("ProblemId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("ARS.Models.Reservation", b =>
                {
                    b.Property<long>("ReservationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassroomId");

                    b.Property<long?>("ClassroomId1");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("ProblemId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("UserId");

                    b.Property<long?>("UserId1");

                    b.HasKey("ReservationId");

                    b.HasIndex("ClassroomId1");

                    b.HasIndex("UserId1");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ARS.Models.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ARS.Models.Temperature", b =>
                {
                    b.Property<long>("TemperatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Celcius");

                    b.Property<int>("ClassroomId");

                    b.HasKey("TemperatureId");

                    b.ToTable("Temperature");
                });

            modelBuilder.Entity("ARS.Models.Ticket", b =>
                {
                    b.Property<long>("TicketId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<int>("ProblemId");

                    b.Property<long?>("ProblemId1");

                    b.HasKey("TicketId");

                    b.HasIndex("ProblemId1");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ARS.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("City");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<int>("RoleId");

                    b.Property<string>("Street");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ARS.Models.ClassRoom", b =>
                {
                    b.HasOne("ARS.Models.Temperature", "Temperature")
                        .WithOne("ClassRoom")
                        .HasForeignKey("ARS.Models.ClassRoom", "TemperatureId1");
                });

            modelBuilder.Entity("ARS.Models.Notification", b =>
                {
                    b.HasOne("ARS.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1");

                    b.HasOne("ARS.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("ARS.Models.Problem", b =>
                {
                    b.HasOne("ARS.Models.ClassRoom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassroomId");
                });

            modelBuilder.Entity("ARS.Models.Reservation", b =>
                {
                    b.HasOne("ARS.Models.ClassRoom", "ClassRoom")
                        .WithMany("Reservations")
                        .HasForeignKey("ClassroomId1");

                    b.HasOne("ARS.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("ARS.Models.Ticket", b =>
                {
                    b.HasOne("ARS.Models.Problem", "Problem")
                        .WithMany()
                        .HasForeignKey("ProblemId1");
                });
#pragma warning restore 612, 618
        }
    }
}
